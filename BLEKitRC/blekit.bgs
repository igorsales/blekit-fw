# BLEKit 
#
#
# OTA Update Procedure
#
# This script contains code used to transfer image to internal flash
# After booting into DFU mode, bootloader reads flash contents and flashes
# contents to module
#
# Example OTA service contains 2 characteristics
# - control point characteristic 
#      This is used to control Flashing procedure
#      Write request must be used to send commands, because some commands may take a while
#      to process.
# - data transfer characteristic
#      Firmware image is transferred through this characteristic
#      Use write command procedure to achieve faster image upload
#
#
# OTA Procedure:
# userdata region must be erased before uploading image
# - Upload Data
#    Use Write Commands to transfer firmware image to Data characteristic
#    NOTE! to simplify script data must be aligned to 256 byte boundaries
# - Flash Image
#    Boot device to DFU mode by writing 0x03 byte to control point

dim command
dim tmp(20)
dim channel
dim data_len
dim curr_connection
dim dfu_pointer             # current pointer to flash location to upload firmware
dim dfu_read_pointer        # previous pointer to last written block of flash
dim dfu_last_packet_size    # previous block size
dim erase_page   # current page to erase
dim erase_flag   # flag to indicate if memory is being erased

dim t_pwm_ch_1_thru_4(8)
dim t_pwm_ch_1_thru_4_def(8)

dim i2c_buffer(19)

dim gpi(1)
dim gpo(1)

dim adc_buffer(4)

const max_erase_page  = 64
const h_restart       = 1
const h_blinker       = 2
const blink_timeout   = 100000
const blink_length    = 500
const restart_timeout = 25000

dim retry_counter # Flash retry counter
dim max_retries   # Flash retry counter
dim blink_status

dim r # used for function results
dim r_len

#init gap mode
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw )
    
    #Set device to advertisement mode and allow undirected connections
    call gap_set_mode(2,2)
    
    # Initialize the DFU pointer
    dfu_pointer = 0
    dfu_read_pointer = 0
    dfu_last_packet_size = 0
    blink_status = 0
    adc_buffer(0:4) = 0

    call hardware_io_port_config_direction(0,$87)
    call hardware_io_port_config_function(0,$7b)
    call hardware_io_port_config_pull(0,0,1) # Pull up
    call hardware_io_port_irq_direction(0,1) # Falling edge
    call hardware_io_port_irq_enable(0,$84)

    call hardware_io_port_config_direction(1,3)
    call hardware_io_port_config_function(1,$c0) # MSBs are Rx and Tx, the rest are GPIOs
    call hardware_io_port_irq_direction(1,1) # Falling edge
    call hardware_io_port_irq_enable(1,$3c)
    call hardware_io_port_write(1,3,blink_status)

    call hardware_io_port_config_direction(2, 7)
    call hardware_io_port_config_function(2,0)
    call hardware_io_port_write(2,7,gpo(0:1))

    call hardware_set_soft_timer(blink_timeout, h_blinker, 1)

    # 60Hz in 1MHz ticks is 16666 ticks
    call hardware_timer_comparator(1, 0, 6, 16666)

    # configure channels at 1.5ms by default
    call hardware_timer_comparator(1, 1, 6, 1500)
    call hardware_timer_comparator(1, 2, 6, 1500)
    call hardware_timer_comparator(1, 3, 6, 1500)
    call hardware_timer_comparator(1, 4, 6, 1500)

    t_pwm_ch_1_thru_4(0:2) = 1500
    t_pwm_ch_1_thru_4(2:2) = 1500
    t_pwm_ch_1_thru_4(4:2) = 1500
    t_pwm_ch_1_thru_4(6:2) = 1500

    t_pwm_ch_1_thru_4_def(0:2) = 1500
    t_pwm_ch_1_thru_4_def(2:2) = 1500
    t_pwm_ch_1_thru_4_def(4:2) = 1500
    t_pwm_ch_1_thru_4_def(6:2) = 1500

    call attributes_write(pwm_ch_1_thru_10, 0, 8, t_pwm_ch_1_thru_4(0:8))
    call attributes_write(pwm_ch_1_thru_10_default, 0, 8, t_pwm_ch_1_thru_4_def(0:8))
end

event hardware_soft_timer(handle)
    if handle = h_blinker
        call hardware_io_port_write(1,1,blink_status)
        if blink_status & $1 = $1 then
            blink_status = blink_status & $fe
            call hardware_set_soft_timer(blink_length, h_blinker, 1)
        else
            blink_status = blink_status | $1
            call hardware_set_soft_timer(blink_timeout, h_blinker, 1)
        end if
    end if

    if handle = h_restart
        call system_reset(1)
    end if
end

# Incoming data event listener
# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    
    #save connection handle, is always 0 if only slave
    curr_connection = connection

    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device
    if handle = ota_control then
        #attribute is user attribute, reason is always write_request_user
        if value_len > 1 || offset > 0 then
            # Not a valid command -> report application error code : 0x80
            call attributes_user_write_response(curr_connection, $80)
        else
            command = value_data(0:1)
            # Command 0 received -> Erase block 0
            if command = 0 then
                if erase_flag = 0 then   
                    erase_page = 0
                    erase_flag = 1
                end if

                call flash_erase_page(erase_page)(r)
                if r = $0
                    erase_page = erase_page + 1

                    if erase_page = max_erase_page then
                        erase_flag = 0
                    end if
                end if
                call attributes_user_write_response(curr_connection, r)
            end if

            # Command 2 received -> Start Flash Uploading
            if command = 2 then
                erase_page = 0
                erase_flag = 0
                dfu_pointer = 0
                dfu_read_pointer = 0
                dfu_last_packet_size = 0
                call attributes_user_write_response(curr_connection, $0)
            end if

            # Command 3 received -> Boot to DFU mode 
            if command = 3 then
                call hardware_set_soft_timer(restart_timeout, h_restart, 1)
                call attributes_user_write_response(curr_connection, $0)
            end if

            # Command 1 received -> Do nothing. Used to erase flash pages 0x10000 - 0x20000
            # Command 4 - Enable power to external flash: Do nothing
                
            if command = 1 || command = 4 then #other commands not used
                erase_page = 0
                erase_flag = 0
                call attributes_user_write_response(curr_connection, $0)
            end if

            if command = 5 then
                # need to rewind to the last write block
                dfu_pointer = dfu_read_pointer
                call attributes_user_write_response(curr_connection, $0)
            end if

            if command >= 6 then # Unknown command -> report application error code : 0x80
                call attributes_user_write_response(curr_connection, $80)
            end if
        end if
    end if
    
    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = ota_data then
        call flash_write_data(dfu_pointer,value_len,value_data(0:value_len))
        dfu_read_pointer = dfu_pointer
        dfu_pointer = dfu_pointer + value_len
        dfu_last_packet_size = value_len
    end if

    if handle = pwm_ch_1_thru_10 then
        if offset > 7 || offset + value_len > 8 then
            call attributes_user_write_response(curr_connection, $ff)
        else
            t_pwm_ch_1_thru_4(offset:value_len) = value_data(0:value_len)
            call hardware_timer_comparator(1, 1, 6, t_pwm_ch_1_thru_4(0:2))
            call hardware_timer_comparator(1, 2, 6, t_pwm_ch_1_thru_4(2:2))
            call hardware_timer_comparator(1, 3, 6, t_pwm_ch_1_thru_4(4:2))
            call hardware_timer_comparator(1, 4, 6, t_pwm_ch_1_thru_4(6:2))
            call attributes_user_write_response(curr_connection, $0)
        end if
    end if

    if handle = pwm_ch_1_thru_10_default then
        if offset > 7 || offset + value_len > 8 then
            call attributes_user_write_response(curr_connection, $ff)
        else
            t_pwm_ch_1_thru_4_def(offset:value_len) = value_data(0:value_len)
            call attributes_user_write_response(curr_connection, $0)
        end if
    end if

    if handle = i2c_control then
        r = $ff
        if value_data(0:1) = $0 then # Write op
            if value_len > 4 then
                # Oper | 8-bit Slave Addr | Stop  | Len | Reg Addr | Data
                i2c_buffer(0:1) = $0
                r_len = value_data(3:1) + 1 # Account for the reg address
                call hardware_i2c_write(value_data(1:1) & $fe, value_data(2:1), r_len, value_data(4:r_len))(r)
                i2c_buffer(1:1) = r
                r = 0
            end if
        end if

        if value_data(0:1) = $1 then # Read op
            # Oper | 8-bit Addr | Stop | Len | Reg Addr
            i2c_buffer(0:1) = $1 # Read operation
            i2c_buffer(1:1) = value_data(4:1) # Reg Address
            i2c_buffer(2:1) = 0
            r_len = value_data(3:1)
            call hardware_i2c_write(value_data(1:1) & $fe, value_data(2:1), 1, value_data(4:1))(r)
            if r = 1 then
                call hardware_i2c_read(value_data(1:1) & $fe, value_data(2:1), r_len)(r,r_len,i2c_buffer(3:r_len))
                if r != 0 then
                    r = $ff
                else
                    i2c_buffer(2:1) = r_len
                end if
            else
                r = $80 | r
            end if
        end if

        if r != 0 then
            call attributes_user_write_response(curr_connection, $80 | r)
        else
            call attributes_user_write_response(curr_connection, $0)
        end if
    end if

    if handle = gp_outputs
        if value_len > 1 || offset > 0 then
            # Not a valid command -> report application error code : 0x80
            call attributes_user_write_response(curr_connection, $80)
        else
            gpo(0:1) = value_data(0:1)
            call hardware_io_port_write(2, 7, gpo(0:1))
            call attributes_user_write_response(curr_connection, $0)
        end if
    end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
    if handle = ota_control then
        if erase_flag = 1 then
            tmp(0) = erase_page
        else
            tmp(0) = 0
        end if
        call attributes_user_read_response(connection, 0, 1, tmp(0:1))
    end if

    if handle = ota_data then
        call flash_read_data(dfu_read_pointer + offset, dfu_last_packet_size)(data_len, tmp(0:data_len))
        if data_len = 0 then
            #read is out of bounds
            call attributes_user_read_response(connection, $7, 0, tmp(0:1))
        else
            call attributes_user_read_response(connection, 0, data_len, tmp(0:data_len))
        end if
    end if

    if handle = pwm_ch_1_thru_10
        if offset > 7 then
            call attributes_user_read_response(connection, $7, 0, tmp(0:1)) # TODO
        else
            r_len = maxsize
            if offset + r_len > 8 then
                r_len = 8 - offset
            end if
            call attributes_user_read_response(connection, 0, r_len, t_pwm_ch_1_thru_4(offset:r_len))
        end if
    end if

    if handle = pwm_ch_1_thru_10_default then
        if offset > 7 then
            call attributes_user_read_response(connection, $7, 0, tmp(0:1)) # TODO
        else
            r_len = maxsize
            if offset + r_len > 8 then
                r_len = 8 - offset
            end if
            call attributes_user_read_response(connection, 0, r_len, t_pwm_ch_1_thru_4_def(offset:r_len))
        end if
    end if

    if handle = i2c_control then
        call attributes_user_read_response(connection, 0, 19, i2c_buffer(0:19))
    end if

    if handle = gp_inputs then
        call hardware_io_port_read(0, $84)(r, tmp(0:1), tmp(1:1))
        call hardware_io_port_read(1, $3c)(r, tmp(2:1), tmp(3:1))

        gpi(0:1) = ((tmp(1:1) & $80) >> 6) | ((tmp(1:1) & $04) >> 2) | (tmp(3:1) & $3c)

        call attributes_user_read_response(connection, 0, 1, gpi(0:1))
    end if

    if handle = gp_outputs then
        call attributes_user_read_response(connection, 0, 1, gpo(0:1))
    end if

    if handle = adcs then
        #  Read AIN0 at 12-bits relative to AVDD, leave in 16-bit container
        call hardware_adc_read(0, 3, 2)(r)
        # And chain to reading AIN1 call hardware_adc_read(1, 3, 2)(r)
    end if
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    if (flags & $1) = $1 then
        call hardware_io_port_write(1,2,2)
    end if
end

# Disconnection event handler 
# Makes the device visible and connectable
event connection_disconnected(handle,result)
    #in case if disconnect, return to advertisement mode

    # Set PWM default if different than 0
    if t_pwm_ch_1_thru_4_def(0:2) != 0 then
        t_pwm_ch_1_thru_4(0:2) = t_pwm_ch_1_thru_4_def(0:2)
        call hardware_timer_comparator(1, 1, 6, t_pwm_ch_1_thru_4_def(0:2))
    end if

    if t_pwm_ch_1_thru_4_def(2:2) != 0 then
        t_pwm_ch_1_thru_4(2:2) = t_pwm_ch_1_thru_4_def(2:2)
        call hardware_timer_comparator(1, 2, 6, t_pwm_ch_1_thru_4_def(2:2))
    end if

    if t_pwm_ch_1_thru_4_def(4:2) != 0 then
        t_pwm_ch_1_thru_4(4:2) = t_pwm_ch_1_thru_4_def(4:2)
        call hardware_timer_comparator(1, 3, 6, t_pwm_ch_1_thru_4_def(4:2))
    end if

    if t_pwm_ch_1_thru_4_def(6:2) != 0 then
        t_pwm_ch_1_thru_4(6:2) = t_pwm_ch_1_thru_4_def(6:2)
        call hardware_timer_comparator(1, 4, 6, t_pwm_ch_1_thru_4_def(6:2))
    end if

    call hardware_io_port_write(1,2,0)
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end

event hardware_io_port_status(timestamp, port, irq, state)
    call hardware_io_port_read(0, $84)(r, tmp(0:1), tmp(1:1))
    call hardware_io_port_read(1, $3c)(r, tmp(2:1), tmp(3:1))

    r = ((tmp(1:1) & $80) >> 6) | ((tmp(1:1) & $04) >> 2) | (tmp(3:1) & $3c)

    if r != gpi(0:1) then
        gpi(0:1) = r
        call attributes_write(gp_inputs, 0, 1, gpi(0:1))
    end if
end

event hardware_adc_result(input, value)
    if input = 0
        adc_buffer(0:2) = value & $fff0
        call hardware_adc_read(1, 3, 2)(r) #  Read AIN1 at 12-bits relative to AVDD, leave in 16-bit container
    end if

    if input = 1 then
        adc_buffer(2:2) = value & $fff0
        call attributes_user_read_response(curr_connection, 0, 4, adc_buffer(0:4))
    end if
end
