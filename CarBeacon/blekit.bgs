# BLEKit CarBeacon
#
#
# OTA update procecure
#
# This script contains code to transfer image to internal flash
# After booting into DFU mode, bootloader reads flash contents and flashes
# contents to module
# 
# Example OTA service contains 2 characteristics
# - control point characteristic 
#      This is used to control Flashing procedure
#      Write request must be used to send commands, because some commands may take a while
#      to process.
# - data transfer characteristic
#      Firmware image is transferred through this characteristic
#      Use write command procedure to achieve faster image upload
#
#
# OTA Procedure:
# userdata region must be erased before uploading image
# - Upload Data
#    Use Write Commands to transfer firmware image to Data characteristic
#    NOTE! to simplify script data must be aligned to 256 byte boundaries
# - Flash Image
#    Boot device to DFU mode by writing 0x03 byte to control point

dim command
dim tmp(20)
dim channel
dim data_len
dim curr_connection
dim dfu_pointer             # current pointer to flash location to upload firmware
dim dfu_read_pointer        # previous pointer to last written block of flash
dim dfu_last_packet_size    # previous block size
dim erase_page   # current page to erase
dim erase_flag   # flag to indicate if memory is being erased

const max_erase_page  = 64
const h_restart       = 1
const h_blinker       = 2
const h_adc_reader    = 3
const h_sm_timer_1    = 4
const h_sm_timer_2    = 5
const h_save_settings = 6

const sm1_off      = 0
const sm1_cranking = 1
const sm1_running  = 2
const sm1_stalling = 3

const sm2_off         = 0
const sm2_turning_on  = 1
const sm2_turning_off = 2
const sm2_running     = 3

const blink_timeout    = 100000
const blink_length     = 750
const restart_timeout  = 25000
const save_settings_to = 48000

const def_to_state_chg    = 8000 # 250 mseconds
const def_to_on_off_chg   = 16000 # 500 mseconds
const def_adc_timeout     = 1600 # Every 50 msec

const settings_ps_key = $8000
const adv_id_key      = $8001

const def_threshold_on    = $626d0000
const def_threshold_full  = $5eb10000
const def_threshold_crank = $4e490000

dim beacon_is_on

dim to_state_chg
dim to_on_off_chg
dim adc_timeout

dim threshold_on
dim threshold_full
dim threshold_crank


dim retry_counter # Flash retry counter
dim max_retries   # Flash retry counter
dim blink_status

dim advdata(30)

dim sm1_state
dim sm2_state
dim new_state
dim new_state2

dim adc_reading # the ADC reading goes here

dim r # used for function results

dim scratchpad_buffer(32)
dim scratchpad_len

procedure handle_sm1_new_state()
    if sm1_state != new_state then
        sm1_state = new_state
        new_state2 = sm2_state

        if sm2_state = sm2_off then
            if sm1_state = sm1_running then
                call hardware_set_soft_timer(to_on_off_chg, h_sm_timer_2, 1)
                new_state2 = sm2_turning_on
            end if
        end if

        if sm2_state = sm2_turning_on then
            if sm1_state = sm1_off then
                call hardware_set_soft_timer(to_on_off_chg, h_sm_timer_2, 1)
                new_state2 = sm2_turning_off
            end if
        end if

        if sm2_state = sm2_turning_off then
            if sm1_state = sm1_running then
                call hardware_set_soft_timer(to_on_off_chg, h_sm_timer_2, 1)
                new_state2 = sm2_turning_on
            end if
        end if

        if sm2_state = sm2_running then
            if sm1_state = sm1_off then
                call hardware_set_soft_timer(to_on_off_chg, h_sm_timer_2, 1)
                new_state2 = sm2_turning_off
            end if
        end if

        if sm2_state != new_state2 then
            sm2_state = new_state2
        end if
    end if
end

procedure turn_beacon_off()
    beacon_is_on = 0
    call hardware_io_port_write(1,2,0)

    call gap_set_mode(gap_non_discoverable, gap_undirected_connectable)

    call gap_set_adv_parameters($4000, $4000, 0)
end

procedure turn_beacon_on()
    beacon_is_on = 1
    call hardware_io_port_write(1,2,2)

    # Set advertisement interval to 125ms.
    # Use all three advertisement channels
    call gap_set_adv_parameters($20, $20, 7)

    # Set advertisement data
    call gap_set_adv_data(0, 30, advdata(0:30))

    #set to advertising mode - with user data
    call gap_set_mode(gap_user_data, gap_undirected_connectable)
end

procedure save_settings_to_ps()
    scratchpad_buffer(0:1)  = 1 # Version
    scratchpad_buffer(1:2)  = threshold_on >> 16
    scratchpad_buffer(3:2)  = threshold_full >> 16
    scratchpad_buffer(5:2)  = threshold_crank >> 16
    scratchpad_buffer(7:2)  = to_state_chg
    scratchpad_buffer(9:2)  = to_on_off_chg
    scratchpad_buffer(11:2) = adc_timeout

    call flash_ps_save(settings_ps_key, 13, scratchpad_buffer(0:13))(r)
    if r != 0 then
        # TODO:
    end if
end

procedure load_settings_from_ps()
    call flash_ps_load(settings_ps_key)(r, scratchpad_len, scratchpad_buffer(0:scratchpad_len))

    if r = 0 then
        if scratchpad_len >= 13 && scratchpad_buffer(0:1) = 1 then
            threshold_on    = scratchpad_buffer(1:2) << 16
            threshold_full  = scratchpad_buffer(3:2) << 16
            threshold_crank = scratchpad_buffer(5:2) << 16
            to_state_chg    = scratchpad_buffer(7:2)
            to_on_off_chg   = scratchpad_buffer(9:2)
            adc_timeout     = scratchpad_buffer(11:2)
        else
            # TODO: Incorrect version
        end if
    else
        # TODO:
    end if
end

procedure save_beacon_adv_id_to_ps()
    call flash_ps_save(adv_id_key, 21, advdata(9:21))

    if r != 0 then
        # TODO: 
    end if
end

procedure load_beacon_adv_id_from_ps()
    call flash_ps_load(adv_id_key)(r, scratchpad_len, scratchpad_buffer(0:scratchpad_len))

    if r = 0 then
        if scratchpad_len >= 16 then
            advdata(9:16) = scratchpad_buffer(0:16)

            if scratchpad_len >= 21 then
                advdata(25:5) = scratchpad_buffer(16:5)
            else
                advdata(25:1) = $00
                advdata(26:1) = $00
                advdata(27:1) = $00
                advdata(28:1) = $00
                advdata(29:1) = $00
            end if
        else
            # TODO: Incorrect key size
        end if
    else
        # TODO
    end if
end

procedure prepare_adv_data()
    # Initialize iBeacon ADV data
    # Flags = LE General Discovery, single mode device (02 01 06)
    advdata(0:1)  = $02
    advdata(1:1)  = $01
    advdata(2:1)  = $06
    # Manufacturer data
    advdata(3:1)  = $1a
    advdata(4:1)  = $ff
    # Preamble
    advdata(5:1)  = $4c
    advdata(6:1)  = $00
    advdata(7:1)  = $02
    advdata(8:1)  = $15

    # Default Apple AirLocate Service UUID: e2c56db5-dffb-48d2-b060-d0f5a71096e0
    advdata(9:1)  = $e2
    advdata(10:1) = $c5
    advdata(11:1) = $6d
    advdata(12:1) = $b5
    advdata(13:1) = $df
    advdata(14:1) = $fb
    advdata(15:1) = $48
    advdata(16:1) = $d2
    advdata(17:1) = $b0
    advdata(18:1) = $60
    advdata(19:1) = $d0
    advdata(20:1) = $f5
    advdata(21:1) = $a7
    advdata(22:1) = $10
    advdata(23:1) = $96
    advdata(24:1) = $e0
 
    # Major : 00 00
    advdata(25:1) = $00
    advdata(26:1) = $00
 
    # Minor : 00 00
    advdata(27:1) = $00
    advdata(28:1) = $00
 
    # Measured TX power : -58
    advdata(29:1) = $00 
end

#init gap mode
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw )
    # Initialize the DFU pointer
    dfu_pointer = 0
    dfu_read_pointer = 0
    dfu_last_packet_size = 0
    blink_status = 1
    adc_reading = 0
    sm1_state = sm1_off
    sm2_state = sm2_off

    to_state_chg    = def_to_state_chg
    to_on_off_chg   = def_to_on_off_chg
    adc_timeout     = def_adc_timeout
    threshold_on    = def_threshold_on
    threshold_full  = def_threshold_full
    threshold_crank = def_threshold_crank

    call prepare_adv_data()
    call load_settings_from_ps()
    call load_beacon_adv_id_from_ps()

    call hardware_io_port_config_direction(0,$01)
    call hardware_io_port_config_function(0,$01)
    call hardware_io_port_config_pull(0,0,1) # Pull ups
    #call hardware_io_port_irq_direction(0,1) # Falling edge
    #call hardware_io_port_irq_enable(0,$84)

    call hardware_io_port_config_direction(1,3)
    call hardware_io_port_config_function(1,0)
    call hardware_io_port_write(1,1,blink_status)

    call hardware_set_soft_timer(blink_timeout, h_blinker, 1)
    call hardware_set_soft_timer(adc_timeout, h_adc_reader, 1)

    call turn_beacon_on()
end

event hardware_soft_timer(handle)
    if handle = h_blinker
        call hardware_io_port_write(1,1,blink_status)
        if blink_status & 1 = 1
            call hardware_set_soft_timer(blink_length, h_blinker, 1)
            blink_status = 0
        else
            call hardware_set_soft_timer(blink_timeout, h_blinker, 1)
            blink_status = 1
        end if
    end if

    if handle = h_restart
        call system_reset(1)
    end if

    if handle = h_adc_reader
        call hardware_adc_read(0, 3, 2) #(r)
        call hardware_set_soft_timer(adc_timeout, h_adc_reader, 1)
    end if

    if handle = h_sm_timer_1 then
        new_state = sm1_state
        if sm1_state = sm1_cranking then
            new_state = sm1_off
        end if

        if sm1_state = sm1_stalling then
            new_state = sm1_off
        end if

        call handle_sm1_new_state()
    end if

    if handle = h_sm_timer_2 then
        new_state2 = sm2_state

        if sm2_state = sm2_turning_on then
            new_state2 = sm2_running
            call turn_beacon_off()
        end if

        if sm2_state = sm2_turning_off then
            new_state2 = sm2_off
            call turn_beacon_on()
        end if

        if sm2_state != new_state2 then
            sm2_state = new_state2
        end if
    end if

    if handle = h_save_settings then
        call save_settings_to_ps()
    end if
end

# Incoming data event listener
# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    
    #save connection handle, is always 0 if only slave
    curr_connection = connection

    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device
    if handle = ota_control then
        #attribute is user attribute, reason is always write_request_user
        if value_len > 1 || offset > 0 then
            # Not a valid command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            command = value_data(0:1)
            # Command 0 received -> Erase block 0
            if command = 0 then
                if erase_flag = 0 then   
                    erase_page = 0
                    erase_flag = 1
                end if

                call flash_erase_page(erase_page)(r)
                if r = $0
                    erase_page = erase_page + 1

                    if erase_page = max_erase_page then
                        erase_flag = 0
                    end if
                end if
                call attributes_user_write_response(connection, r)

            end if

            # Command 2 received -> Start Flash Uploading
            if command = 2 then
                erase_page = 0
                erase_flag = 0
                dfu_pointer = 0
                dfu_read_pointer = 0
                dfu_last_packet_size = 0
                call attributes_user_write_response(connection, $0)
            end if

            # Command 3 received -> Boot to DFU mode 
            if command = 3 then
                call hardware_set_soft_timer(restart_timeout, h_restart, 1)
                call attributes_user_write_response(connection, $0)
            end if

            # Command 1 received -> Do nothing. Used to erase flash pages 0x10000 - 0x20000
            # Command 4 - Enable power to external flash: Do nothing
                
            if command = 1 || command = 4 then #other commands not used
                erase_page = 0
                erase_flag = 0
                call attributes_user_write_response(connection, $0)
            end if

            if command = 5 then
                # need to rewind to the last write block
                dfu_pointer = dfu_read_pointer
                call attributes_user_write_response(connection, $0)
            end if

            if command >= 6 then # Unknown command -> report application error code : 0x80
                call attributes_user_write_response(connection, $80)
            end if
        end if
    end if
    
    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = ota_data then
        call flash_write_data(dfu_pointer,value_len,value_data(0:value_len))
        dfu_read_pointer = dfu_pointer
        dfu_pointer = dfu_pointer + value_len
        dfu_last_packet_size = value_len
    end if

    if handle = carbeacon_configuration then
        if value_len != 12 || offset > 0 then
            # Not a valid command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            threshold_on    = value_data(0:2) << 16
            threshold_full  = value_data(2:2) << 16
            threshold_crank = value_data(4:2) << 16
            to_state_chg    = value_data(6:2)
            to_on_off_chg   = value_data(8:2)
            adc_timeout     = value_data(10:2)
            call attributes_user_write_response(connection, $0)
            call hardware_set_soft_timer(0, h_save_settings, 1) # Cancel timer first
            call hardware_set_soft_timer(save_settings_to, h_save_settings, 1)

            # Re-start the ADC
            call hardware_set_soft_timer(0, h_adc_reader, 1)
            call hardware_set_soft_timer(adc_timeout, h_adc_reader, 1)
        end if
    end if

    if handle = carbeacon_uuid
        if offset + value_len <= 21 then
            call attributes_user_write_response(connection, $0)

            advdata(9+offset:value_len) = value_data(0:value_len)

            if offset + value_len = 21 then
                #call attributes_user_write_response(connection, $0)

                call save_beacon_adv_id_to_ps()

                if beacon_is_on != 0 then
                    # Re-start beacon to update beacon ID
                    call turn_beacon_off()
                    call turn_beacon_on()
                end if
            end if
        else
            call attributes_user_write_response(connection, $80)
        end if
    end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
    if handle = ota_control then
        if erase_flag = 1 then
            tmp(0:1) = erase_page
        else
            tmp(0:1) = 0
        end if
        call attributes_user_read_response(connection, 0, 1, tmp(0:1))
    end if

    if handle = ota_data then
        call flash_read_data(dfu_read_pointer + offset, dfu_last_packet_size)(data_len, tmp(0:data_len))
        if data_len = 0 then
            #read is out of bounds
            call attributes_user_read_response(connection, $7, 0, tmp(0:1))
        else
            call attributes_user_read_response(connection, 0, data_len, tmp(0:data_len))
        end if
    end if

    if handle = adcs then
        scratchpad_buffer(0:2) = adc_reading >> 16
        call attributes_user_read_response(connection, 0, 2, scratchpad_buffer(0:2))
    end if

    if handle = carbeacon_configuration then
        scratchpad_buffer(0:2)  = threshold_on >> 16
        scratchpad_buffer(2:2)  = threshold_full >> 16
        scratchpad_buffer(4:2)  = threshold_crank >> 16
        scratchpad_buffer(6:2)  = to_state_chg
        scratchpad_buffer(8:2)  = to_on_off_chg
        scratchpad_buffer(10:2) = adc_timeout
        call attributes_user_read_response(connection, 0, 12, scratchpad_buffer(0:12))
    end if

    if handle = carbeacon_uuid then
        call attributes_user_read_response(connection, 0, 21, advdata(9:21))
    end if
end

# Disconnection event handler 
# Makes the device visible and connectable
event connection_disconnected(handle,result)
    if beacon_is_on != 0
        call turn_beacon_on()
    else
        call turn_beacon_off()
    end if

    #in case if disconnect, return to advertisement mode
    #call gap_set_adv_parameters(200, 200, 7)
    #set to advertising mode - with user data
    #call gap_set_mode(4, gap_undirected_connectable)
end

event hardware_adc_result(input, value)
    adc_reading = (value & $fff0) << 16

    new_state = sm1_state

    if sm1_state = sm1_off then
        if adc_reading < threshold_crank then
            # V dropped to below cranking threshold
            call hardware_set_soft_timer(to_state_chg, h_sm_timer_1, 1)
            new_state = sm1_cranking
        end if

        if adc_reading > threshold_on then
            new_state = sm1_running
        end if
    end if

    if sm1_state = sm1_cranking then
        if adc_reading > threshold_on then
            call hardware_set_soft_timer(0, h_sm_timer_1, 1) # Invalidate timer
            new_state = sm1_running
        end if
    end if

    if sm1_state = sm1_running then
        if adc_reading < threshold_full then
            call hardware_set_soft_timer(to_state_chg, h_sm_timer_1, 1)
            new_state = sm1_stalling
        end if
    end if

    if sm1_state = sm1_stalling then
        if adc_reading > threshold_on then
            call hardware_set_soft_timer(0, h_sm_timer_1, 1) # Invalidate timer
            new_state = sm1_running
        end if
    end if

    call handle_sm1_new_state()
end
