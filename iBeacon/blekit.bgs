# BLEKit iBeacon example
#
# This script contains code to transfer image to internal flash
# After booting into DFU mode, bootloader reads flash contents and flashes
# contents to module
#
# Example OTA service contains 2 characteristics
# - control point characteristic 
#      This is used to control Flashing procedure
#      Write request must be used to send commands, because some commands may take a while
#      to process.
# - data transfer characteristic
#      Firmware image is transferred through this characteristic
#      Use write command procedure to achieve faster image upload
#
#
# OTA Procedure:
# userdata region must be erased before uploading image
# - Upload Data
#    Use Write Commands to transfer firmware image to Data characteristic
#    NOTE! to simplify script data must be aligned to 256 byte boundaries
# - Flash Image
#    Boot device to DFU mode by writing 0x03 byte to control point

dim command
dim tmp(20)
dim channel
dim data_len
dim curr_connection
dim dfu_pointer             # current pointer to flash location to upload firmware
dim dfu_read_pointer        # previous pointer to last written block of flash
dim dfu_last_packet_size    # previous block size
dim erase_page   # current page to erase
dim erase_flag   # flag to indicate if memory is being erased

const max_erase_page  = 64
const h_restart       = 1
const h_blinker       = 2
const blink_timeout   = 100000
const blink_length    = 750
const restart_timeout = 25000

dim retry_counter # Flash retry counter
dim max_retries   # Flash retry counter
dim blink_status

dim advdata(30)

dim r # used for function results

#init gap mode
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw )
    # Initialize the DFU pointer
    dfu_pointer = 0
    dfu_read_pointer = 0
    dfu_last_packet_size = 0
    blink_status = 1

    call hardware_io_port_config_direction(1,3)
    call hardware_io_port_config_function(1,0)
    call hardware_io_port_write(1,3,blink_status)

    call hardware_set_soft_timer(blink_timeout, h_blinker, 0)

    # Set advertisement interval to 125ms.
    # Use all three advertisement channels
    call gap_set_adv_parameters(200, 200, 7)

    # Initialize iBeacon ADV data
    # Flags = LE General Discovery, single mode device (02 01 06)
    advdata(0:1) = $02
    advdata(1:1) = $01
    advdata(2:1) = $06
    # Manufacturer data
    advdata(3:1) = $1a
    advdata(4:1) = $ff
    # Preamble
    advdata(5:1) = $4c
    advdata(6:1) = $00
    advdata(7:1) = $02
    advdata(8:1) = $15

    # Apple AirLocate Service UUID: e2c56db5-dffb-48d2-b060-d0f5a71096e0
    advdata(9:1) = $e2
    advdata(10:1) = $c5
    advdata(11:1) = $6d
    advdata(12:1) = $b5
    advdata(13:1) = $df
    advdata(14:1) = $fb
    advdata(15:1) = $48
    advdata(16:1) = $d2
    advdata(17:1) = $b0
    advdata(18:1) = $60
    advdata(19:1) = $d0
    advdata(20:1) = $f5
    advdata(21:1) = $a7
    advdata(22:1) = $10
    advdata(23:1) = $96
    advdata(24:1) = $e0
 
    # Major : 00
    advdata(25:1) = $00
    advdata(26:1) = $00
 
    # Minor : 00 00
    advdata(27:1) = $00
    advdata(28:1) = $00
 
    # Measured TX power : -58
    advdata(29:1) = $c6 
  
    # Set advertisement data
    call gap_set_adv_data(0, 30, advdata(0:30))
 
    #set to advertising mode - with user data
    call gap_set_mode(4, gap_undirected_connectable)
end

event hardware_soft_timer(handle)
    if handle = h_blinker
        call hardware_io_port_write(1,1,blink_status)
        if blink_status & 1 = 1
            call hardware_set_soft_timer(blink_length, h_blinker, 0)
            blink_status = 0
        else
            call hardware_set_soft_timer(blink_timeout, h_blinker, 0)
            blink_status = 1
        end if
        
    end if

    if handle = h_restart
        call system_reset(1)
    end if
end

# Incoming data event listener
# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    
    #save connection handle, is always 0 if only slave
    curr_connection = connection

    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device
    if handle = ota_control then
        #attribute is user attribute, reason is always write_request_user
        if value_len > 1 || offset > 0 then
            # Not a valid command -> report application error code : 0x80
            call attributes_user_write_response(curr_connection, $80)
        else
            command = value_data(0:1)
            # Command 0 received -> Erase block 0
            if command = 0 then
                if erase_flag = 0 then   
                    erase_page = 0
                    erase_flag = 1
                end if

                call flash_erase_page(erase_page)(r)
                if r = $0
                    erase_page = erase_page + 1

                    if erase_page = max_erase_page then
                        erase_flag = 0
                    end if
                end if
                call attributes_user_write_response(curr_connection, r)

            end if

            # Command 2 received -> Start Flash Uploading
            if command = 2 then
                erase_page = 0
                erase_flag = 0
                dfu_pointer = 0
                dfu_read_pointer = 0
                dfu_last_packet_size = 0
                call attributes_user_write_response(curr_connection, $0)
            end if

            # Command 3 received -> Boot to DFU mode 
            if command = 3 then
                call hardware_set_soft_timer(restart_timeout, h_restart, 1)
                call attributes_user_write_response(curr_connection, $0)
            end if

            # Command 1 received -> Do nothing. Used to erase flash pages 0x10000 - 0x20000
            # Command 4 - Enable power to external flash: Do nothing
                
            if command = 1 || command = 4 then #other commands not used
                erase_page = 0
                erase_flag = 0
                call attributes_user_write_response(curr_connection, $0)
            end if

            if command = 5 then
                # need to rewind to the last write block
                dfu_pointer = dfu_read_pointer
                call attributes_user_write_response(curr_connection, $0)
            end if

            if command >= 6 then # Unknown command -> report application error code : 0x80
                call attributes_user_write_response(curr_connection, $80)
            end if
        end if
    end if
    
    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = ota_data then
        call flash_write_data(dfu_pointer,value_len,value_data(0:value_len))
        dfu_read_pointer = dfu_pointer
        dfu_pointer = dfu_pointer + value_len
        dfu_last_packet_size = value_len
    end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
    if handle = ota_control then
        if erase_flag = 1 then
            tmp(0:1) = erase_page
        else
            tmp(0:1) = 0
        end if
        call attributes_user_read_response(connection, 0, 1, tmp(0:1))
    end if

    if handle = ota_data then
        call flash_read_data(dfu_read_pointer + offset, dfu_last_packet_size)(data_len, tmp(0:data_len))
        if data_len = 0 then
            #read is out of bounds
            call attributes_user_read_response(connection, $7, 0, tmp(0:1))
        else
            call attributes_user_read_response(connection, 0, data_len, tmp(0:data_len))
        end if
    end if
end

# Disconnection event handler 
# Makes the device visible and connectable
event connection_disconnected(handle,result)
    #in case if disconnect, return to advertisement mode
    call gap_set_adv_parameters(200, 200, 7)
    #set to advertising mode - with user data
    call gap_set_mode(4, gap_undirected_connectable)
end
